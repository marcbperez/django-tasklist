defaultTasks "watch", "build", "install", "makeMigrations", "migrate", "test"

def path = System.getProperty("user.dir")
def srcDir = "${path}/endpoint"
def aptPackages = ["python-pip", "pandoc"]

task watch(type: Exec) {
  def sourceFiles = fileTree(srcDir) {
    exclude "**/*.pyc"
  }

  description "Watches for canges, use 'gradle --continuous'."
  inputs.files(sourceFiles)
  commandLine "true"

  new ByteArrayOutputStream()
}

task dependencies() {
  description "Installs all dependencies."

  dependsOn {
    tasks.findAll { task ->
      task.name.startsWith("dependencies") && !task.name.equals("dependencies")
    }
  }
}

task dependenciesApt(type: Exec) {
  description "Installs APT dependencies."
  workingDir path
  commandLine "apt-get"
  args = ["install", "-y"] + aptPackages

  new ByteArrayOutputStream()
}

task build() {
  description "Builds all sources."

  dependsOn {
    tasks.findAll { task ->
      task.name.startsWith("build") && !task.name.equals("build")
    }
  }
}

task buildReadme(type: Exec) {
  description "Converts README.md to reStructuredText."
  workingDir path
  commandLine "pandoc"
  args = ["--from=markdown", "--to=rst", "--output=README.rst", "README.md"]

  new ByteArrayOutputStream()
}

task install(type: Exec) {
  description "Installs this Python module."
  workingDir path
  commandLine "pip"
  args = ["install", "-e", "."]

  new ByteArrayOutputStream()
}

task makeMigrations(type: Exec) {
  description "Performs data migrations for this module."
  workingDir path
  commandLine "python"
  args = ["manage.py", "makemigrations"]

  new ByteArrayOutputStream()
}

task migrate(type: Exec) {
  description "Performs data migrations for this module."
  workingDir path
  commandLine "python"
  args = ["manage.py", "migrate"]

  new ByteArrayOutputStream()
}

task test(type: Exec) {
  description "Tests this Python module."
  workingDir path
  commandLine "python"
  args = ["manage.py", "test"]

  new ByteArrayOutputStream()
}
